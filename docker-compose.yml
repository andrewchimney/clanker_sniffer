services:
  db:
    image: postgres:15
    container_name: clanker_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./shared_data:/shared_data
    command:
      - "postgres"
      - "-c"
      - "log_timezone=UTC"                      # match your appâ€™s UTC timestamps
      - "-c"
      - "log_min_messages=info"                 # show INFO and above
      - "-c"
      - "log_min_error_statement=info"
      - "-c"
      - "client_min_messages=notice"
      - "-c"
      - "log_line_prefix=%m %s:     clanker_db %u@%d app=%a [%p] "
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"]
      interval: 100s
      timeout: 5s
      retries: 5
      start_period: 20s


  frontend:
    build: ./frontend
    container_name: clanker_frontend
    depends_on:
      orchestrator_api:
        condition: service_healthy
    restart: on-failure
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
    working_dir: /app
    command: sh -c "npm run dev"
    volumes:
      - ./frontend:/app
      - ./shared_data:/shared_data
      - /app/node_modules
    env_file:
      - ./.env

  demucs_api:
    build: ./demucs-api
    container_name: clanker_demucs
    restart: on-failure
    volumes:
      - ./demucs-api:/app
      - ./shared_data:/shared_data
    working_dir: /app
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 100s
      timeout: 3s
      retries: 30
      start_period: 20s


  whisper_api:
    build: ./whisper-api
    container_name: clanker_whisper
    restart: on-failure
    volumes:
      - ./whisper-api:/app
      - ./shared_data:/shared_data
    working_dir: /app
    env_file:
      - ./.env
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 100s
      timeout: 3s
      retries: 30
      start_period: 20s


  classifier_api:
    build: ./classifier-api
    container_name: clanker_classifier
    restart: on-failure
    volumes:
      - ./classifier-api:/app
      - ./shared_data:/shared_data
    working_dir: /app
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 100s
      timeout: 3s
      retries: 30
      start_period: 20s

  acousti_api:
    build: ./acousti-api
    container_name: clanker_acousti
    restart: on-failure
    volumes:
      - ./acousti-api:/app
      - ./shared_data:/shared_data
    working_dir: /app
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 100s
      timeout: 3s
      retries: 30
      start_period: 20s
  orchestrator_api:
    build: ./orchestrator-api
    container_name: clanker_orchestrator
    depends_on:
      db:
        condition: service_healthy
      demucs_api:
        condition: service_healthy
      whisper_api:
        condition: service_healthy
      classifier_api:
        condition: service_healthy
      acousti_api:
        condition: service_healthy
    volumes:
      - ./orchestrator-api:/app
      - ./shared_data:/shared_data
    working_dir: /app
    env_file:
      - ./.env
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 100s
      timeout: 3s
      retries: 30
      start_period: 20s

  # worker:
  #   build: ./orchestrator-api
  #   command: ["python", "-u", "worker.py"]
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
  #   volumes:
  #     - ./orchestrator-api:/app
  #     - ./shared_data:/shared_data
  #   restart: unless-stopped





volumes:
  pgdata:
